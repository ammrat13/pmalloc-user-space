# SPDX-License-Identifier: GPL-2.0
# Copyright (C) 2022  Ammar Ratnani <ammrat13@gmail.com>
version: 2.1

executors:
  executor:
    docker:
      - image: ammrat13/pmalloc-user-space
    resource_class: small


jobs:

  lint:
    executor: executor
    steps:
      - checkout
      - run: cpplint --recursive .

  build:
    executor: executor
    parameters:
      config:
        description: what configuration to build and test
        type: enum
        enum: [ "Debug", "Release" ]
    steps:
      - checkout
      - run:
          name: Always Generate Core Dumps
          command: ulimit -c unlimited

      - run:
          name: Configure
          working_directory: "."
          command: |
            cmake \
              -G "Unix Makefiles" -B build/ \
              -DCMAKE_BUILD_TYPE="<< parameters.config >>" \
              -DCMAKE_INSTALL_PREFIX="${PWD}/install/" \
              -DBUILD_TESTING=ON

      - run:
          name: Build
          working_directory: ./build/
          command: make -j$(nproc)

      - run:
          name: Test
          working_directory: ./build/
          command: ctest --parallel $(nproc)
      - run:
          name: Memcheck
          working_directory: ./build/
          command: |
            ctest --parallel $(nproc) \
              --overwrite MemoryCheckCommandOptions="--leak-check=full --error-exitcode=1" \
              --test-action memcheck --label-regex Memcheck
      - run:
          name: Save Core Dumps
          working_directory: ./build/
          when: on_fail
          command: |
            mkdir -p /tmp/core_dumps/
            find . -name "core.*" \
              -exec cp "{}" /tmp/core_dumps/ \;
      - run:
          name: Save Memory Check Output
          working_directory: build/
          when: on_fail
          command: |
            mkdir -p /tmp/memcheck/
            find . -name "MemoryChecker.*.log" \
              -exec cp "{}" /tmp/memcheck/ \;

      - when:
          condition:
            equal: [ << parameters.config >>, "Release" ]
          steps:
            - run:
                name: Install
                working_directory: build/
                command: make install
            - run:
                name: Save Install Tree
                working_directory: "."
                command: |
                  mkdir -p /tmp/
                  tar czf /tmp/install.tar.gz install/

      - store_artifacts:
          path: /tmp/core_dumps/
          destination: core_dumps
      - store_artifacts:
          path: /tmp/memcheck/
          destination: memcheck
      - store_artifacts:
          path: /tmp/install.tar.gz
          destination: install.tar.gz


workflows:
  on-push:
    jobs:
      - lint
      - build:
          requires: [ "lint" ]
          matrix:
            parameters:
              config: [ "Debug", "Release" ]
