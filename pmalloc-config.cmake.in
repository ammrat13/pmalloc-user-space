# SPDX-License-Identifier: GPL-2.0
# Copyright (C) 2022  Ammar Ratnani <ammrat13@gmail.com>
# See: https://alexreinking.com/blog/building-a-dual-shared-and-static-library-with-cmake.html

cmake_minimum_required(VERSION 3.23)
@PACKAGE_INIT@

# Code for failing out. We do this a lot.
macro(pmalloc_die msg)
  set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE "${msg}")
  set(${CMAKE_FIND_PACKAGE_NAME}_FOUND FALSE)
  return()
endmacro()

# By default, use static.
set(pmalloc_cfg static)

# Check all the components and see which configuration is specified. If the user
# specifies a non-existant component, bail.
set(pmalloc_known_comps static shared)
set(pmalloc_cfg_requested NO)         # COMPONENTS specified any configuration
set(pmalloc_cfg_static_requested NO)  # COMPONENTS specified static libraries
set(pmalloc_cfg_shared_requested NO)  # COMPONENTS specified shared libraries
foreach(pmalloc_comp IN LISTS ${CMAKE_FIND_PACKAGE_NAME}_FIND_COMPONENTS)
  if(pmalloc_comp IN_LIST pmalloc_known_comps)
    set(pmalloc_cfg_requested YES)
    set(pmalloc_cfg_${pmalloc_comp}_requested YES)
  else()
    pmalloc_die("Component not recognized `${pmalloc_comp}`")
  endif()
endforeach()
# Ensure that only one of the components was requested
if(pmalloc_cfg_static_requested AND pmalloc_cfg_shared_requested)
  pmalloc_die("`static` and `shared` components are mutually exclusive")
endif()

# If components were given, go off them
if(pmalloc_cfg_requested)
  if(pmalloc_cfg_shared_requested)
    set(pmalloc_cfg shared)
  endif()
# Otherwise, go off BUILD_SHARED_LIBS
elseif(BUILD_SHARED_LIBS)
  set(pmalloc_cfg shared)
endif()

# Fail out if the configuration isn't installed
if(NOT EXISTS "${CMAKE_CURRENT_LIST_DIR}/pmalloc-${pmalloc_cfg}.cmake")
  pmalloc_die("`${pmalloc_cfg}` libraries were requested but not found")
endif()
# Include the configuration and alias for convenience.
include("${CMAKE_CURRENT_LIST_DIR}/pmalloc-${pmalloc_cfg}.cmake")
add_library(pmalloc::pmalloc ALIAS pmalloc::pmalloc-${pmalloc_cfg})
